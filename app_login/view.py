# encoding:utf-8
import json
import re
import shlex
import locale
import sqlite3

from flask import request, render_template, jsonify, session, url_for, redirect, Flask, flash
import os
import subprocess
from flask_login import login_required, login_user, current_user
from requests import auth

from . import login
from datetime import datetime
from .models import User, Order, Comment
from .. import login_manager
from .. import db

# 定义一个正则表达式，检查命令是否包含任何特殊字符
COMMAND_REGEX = re.compile(r'^[\w\-\/\s]+$')


@login_manager.user_loader
def load_user(user_id):  # 创建用户加载回调函数，接受用户 ID 作为参数
    user = User.query.get(int(user_id))  # 用 ID 作为 User 模型的主键查询对应的用户
    return user  # 返回用户对象


@login.route('/', methods=['POST', 'GET'])
@login.route('/index', methods=['GET', 'POST'])
def index():
    if request.method == "GET":
        if session.get('is_admin'):
            print(session)
            return redirect(url_for('login.user_list'))
        return render_template('index.html')


@login.route('/getSession', methods=['POST'])
def getSession():
    print(session.get('user'), session.get('username'))
    return jsonify({'user': session.get('user'), 'username': session.get('username')})


@login.route('/logout', methods=['GET'])
def user_logout():
    session.clear()
    return redirect(url_for('login.index'))


@login.route('/login', methods=['POST', 'GET'])
def signin():
    if request.method == 'GET':
        if session.get('is_admin'):
            return render_template('admin_users.html')
        if session.get('user'):
            return render_template('index.html')
        return render_template('login.html')
    else:
        data = json.loads(request.form.get('data'))
        mail_address = data['mail']
        password = data['password']
        checked = data['checked']
        user = User.query.filter_by(account=mail_address).first()
        if not user:
            return jsonify({"msg": "该用户不存在！", "status": "failed"})
        if mail_address == user.account and user.check_password(password):
            print(user.id)
            print(user.user_name)
            print(user.is_admin)
            session['user']  = user.id
            session['username'] = user.user_name
            if user.is_admin:
                print(user.is_admin)
                session['is_admin'] = True
                return jsonify({"msg": "管理员登录成功！", "status": "success"})
            else:
                login_user(user)  # 登入用户
            if checked:
                session.permanent = True
            return jsonify({"msg": "登录成功！", "status": "success"})

        return jsonify({"msg": "密码错误！", "status": "failed"})


@login.route('/register', methods=['POST', 'GET'])
def register():
    if request.method == 'POST':
        data = json.loads(request.form.get('data'))
        user_name = data['username']
        mail_address = data['mail']
        password = data['password']
        print(user_name, mail_address)
        tmp_user = User.query.filter_by(account=mail_address).first()
        if tmp_user:
            return jsonify({"msg": "该邮箱已被注册！", "status": "failed"})
        user = User(user_name, mail_address, password)
        user.set_password(password)
        from .. import db
        db.session.add(user)
        db.session.commit()
        return jsonify({"msg": "注册成功！3秒后返回登录界面", "status": "success"})
    else:
        return render_template('register.html')


@login.route('/uploadfile', methods=['POST', 'GET'])
def upload():
    f = request.files['file']
    print(request.files)
    try:
        save_folder = "D:/Code_all/Graduation_Design/saveFiles"
        if not os.path.exists(save_folder):
            os.mkdir(save_folder)
        f.save(os.path.join(save_folder, f.filename))
    except Exception:
        return jsonify({'status': 'failed'})
    return jsonify({'status': 'success'})


@login.route('/detect', methods=['POST', 'GET'])
def detect():
    data = json.loads(request.form.get('data'))
    print(data)
    if data is None:
        return 'Invalid JSON data.', 400
    file_name = data['file_name']
    model_file_path = 'D:/Code_all/Graduation_Design/maldetect/src/data/ember2018/ember_model_2018.txt'
    file_path = 'D:/Code_all/Graduation_Design/saveFiles/' + file_name
    command = f"python D:/Code_all/Graduation_Design/maldetect/src/ember/scripts/classify_binaries.py -m {model_file_path} {file_path} "
    # # 验证命令是否符合预期格式
    # if not COMMAND_REGEX.match(command):
    #     return jsonify({'error': 'Invalid command'}), 400
    #
    # # 使用 shlex.split() 函数解析命令行参数
    # args = shlex.split(command)
    #
    # # 检查命令是否包含非法字符
    # for arg in args:
    #     if not COMMAND_REGEX.match(arg):
    #         return jsonify({'error': 'Invalid argument'}), 400
    #
    # # 使用 subprocess.check_output() 函数执行命令
    output = subprocess.check_output(command, shell=True)
    # print({'output': output.decode('utf-8')})
    print(output)
    decoded_output = output[0] - 48
    print(decoded_output)
    binary = ['safe', 'dangerous']
    order = Order(file_name, binary[int(decoded_output)])
    from .. import db
    db.session.add(order)
    db.session.commit()
    # print(jsonify({'output': output.decode('utf-8')}))
    return jsonify({'output': binary[int(decoded_output)]})


@login.route('/show_files')
def show_files():
    files = Order.query.all()
    return render_template('files.html', files=files)


# Community comments page
@login.route('/comments', methods=['GET', 'POST'])
def comments():
    # Get comments from the database
    comments = Comment.query.order_by(Comment.created_at.desc()).all()
    if request.method == 'POST':
        if not current_user.is_authenticated:
            flash('您必须登录才能发布评论。')
            return redirect(url_for('login.index'))

        comment_text = request.form.get('comment')
        if comment_text:
            new_comment = Comment(text=comment_text, user_name=session.get('username'))
            db.session.add(new_comment)
            db.session.commit()
            flash('您的评论已发布！')
            return redirect(url_for('login.comments'))
        else:
            flash('请在提交之前输入评论。')
            return redirect(url_for('login.comments'))

        # Check if user is logged in
    if current_user.is_authenticated:
        # Render the community comments page with the comments and the input form
        return render_template('comments.html', comments=comments, logged_in=True)

    # Render the community comments page with only the comments (no input form)
    return render_template('comments.html', comments=comments, logged_in=False)


# 定义展示所有评论的路由和视图函数
@login.route('/admin/comments')
def admin_comments():
    comments = Comment.query.all()
    return render_template('admin_comments.html', comments=comments)


# 定义删除评论的路由和视图函数
@login.route('/admin/comments/delete/<int:comment_id>', methods=['GET', 'POST'])
def delete_comment(comment_id):
    comment = Comment.query.get(comment_id)
    db.session.delete(comment)
    db.session.commit()
    flash('评论删除成功')
    return redirect(url_for('login.admin_comments'))


# 定义搜索评论的路由和视图函数
@login.route('/admin/comments/search', methods=['POST'])
def search_comment():
    keyword = request.form.get('keyword')
    comments = Comment.query.filter(Comment.comment.like(f'%{keyword}%')).all()
    return render_template('admin_comments.html', comments=comments)


@login.route('/admin/users')
def user_list():
    users = User.query.all()
    print(users)
    return render_template('admin_users.html', users=users)


@login.route('/admin/users/add', methods=['GET', 'POST'])
def add_user():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        is_admin = True if request.form.get('is_admin') else False

        user = User(username=username)
        user.set_password(password)
        user.is_admin = is_admin

        db.session.add(user)
        db.session.commit()

        flash('User added successfully.')
        return redirect(url_for('user_list'))

    return render_template('add_user.html')


@login.route('/admin/users/delete/<int:user_id>', methods=['GET', 'POST'])
def delete_user(user_id):
    user = User.query.get(user_id)

    db.session.delete(user)
    db.session.commit()

    flash('User deleted successfully.')
    return redirect(url_for('login.user_list'))


@login.route('/admin/users/unset-admin/<int:user_id>', methods=['GET', 'POST'])
def unset_admin(user_id):
    user = User.query.get(user_id)
    user.is_admin = False
    db.session.commit()
    flash('已取消管理员权限')
    return redirect(url_for('login.user_list'))


@login.route('/admin/users/set-admin/<int:user_id>', methods=['GET', 'POST'])
def set_admin(user_id):
    user = User.query.get(user_id)
    user.is_admin = True
    db.session.commit()
    flash('已设置管理员权限')
    return redirect(url_for('login.user_list'))


@login.route('/admin/view_results')
def view_results():
    results = Order.query.all()
    return render_template('admin_results.html', results=results)


@login.route('/admin/search_results', methods=['GET', 'POST'])
def search_results():
    keyword = request.form.get('keyword')
    results = Order.query.filter(Order.pe_name.like(f'%{keyword}%')).all()
    return render_template('admin_results.html', results=results)


@login.route('/delete/<int:result_id>', methods=['GET', 'POST'])
def delete_result(result_id):
    result = Order.query.get(result_id)
    db.session.delete(result)
    db.session.commit()
    flash('分析结果已删除')
    return redirect(url_for('login.view_results'))


